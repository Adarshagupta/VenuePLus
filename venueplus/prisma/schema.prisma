// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  avatar    String?
  emailVerified        Boolean?  @default(false)
  emailVerificationOTP String?
  emailVerificationExpires DateTime?
  passwordResetOTP     String?
  passwordResetExpires DateTime?
  preferences Json?  // Store user preferences and travel style
  stats     Json?    // Store user travel statistics
  subscription Json? // Store subscription information
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  trips           Trip[]
  accounts        Account[]
  sessions        Session[]
  savedItineraries SavedItinerary[]
  recentViews     RecentView[]
  bookings        Booking[]
  activities      UserActivity[]
  wishlists       Wishlist[]
  memories        TravelMemory[]
  ticketBookings  TicketBooking[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Trip {
  id          String   @id @default(cuid())
  userId      String
  name        String
  destination String
  startDate   DateTime
  endDate     DateTime
  duration    String
  travelers   String
  fromCity    String
  isPublic    Boolean  @default(false)
  metadata    Json?    // Store AI-generated data and preferences
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stops       TripStop[]

  @@map("trips")
}

model City {
  id          String   @id @default(cuid())
  name        String
  country     String
  countryCode String
  latitude    Float?
  longitude   Float?
  costIndex   Int      @default(3) // 1-5 scale
  popularity  Int      @default(50) // 1-100 scale
  imageUrl    String?
  description String?
  tags        String   @default("")
  createdAt   DateTime @default(now())
  
  tripStops   TripStop[]
  activities  Activity[]

  @@map("cities")
}

model TripStop {
  id          String   @id @default(cuid())
  tripId      String
  cityId      String
  arrivalDate DateTime
  departureDate DateTime
  orderIndex  Int
  notes       String?
  
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  city        City     @relation(fields: [cityId], references: [id])
  activities  TripActivity[]

  @@map("trip_stops")
}

model Activity {
  id          String   @id @default(cuid())
  cityId      String
  name        String
  description String?
  category    String
  estimatedCost Float?
  duration    Int?     // in minutes
  rating      Float?   // 1.0-5.0
  imageUrl    String?
  tags        String   @default("")
  createdAt   DateTime @default(now())
  
  city        City     @relation(fields: [cityId], references: [id])
  tripActivities TripActivity[]

  @@map("activities")
}

model TripActivity {
  id          String   @id @default(cuid())
  tripStopId  String
  activityId  String
  scheduledDate DateTime?
  scheduledTime String?
  actualCost  Float?
  notes       String?
  completed   Boolean  @default(false)
  
  tripStop    TripStop @relation(fields: [tripStopId], references: [id], onDelete: Cascade)
  activity    Activity @relation(fields: [activityId], references: [id])

  @@map("trip_activities")
}

model SavedItinerary {
  id            String   @id @default(cuid())
  userId        String
  name          String
  description   String?
  destination   String
  duration      String
  travelers     Int      @default(1)
  totalCost     Float    @default(0)
  currency      String   @default("INR")
  startDate     DateTime?
  endDate       DateTime?
  status        String   @default("draft") // draft, planned, booked, completed, cancelled
  packageId     String?
  packageData   Json?    // Store package information
  customizations Json?   // Store customization data
  itineraryData Json?    // Store detailed itinerary
  shareSettings Json?    // Store sharing preferences
  tags          String   @default("")
  rating        Float?
  review        String?
  photos        String   @default("")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastViewedAt  DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_itineraries")
}

model RecentView {
  id           String   @id @default(cuid())
  userId       String
  itemType     String   // package, destination, activity, hotel, itinerary
  itemId       String
  itemData     Json     // Store item details for quick access
  viewedAt     DateTime @default(now())
  viewDuration Int      @default(0) // in seconds
  source       String   @default("direct") // search, recommendation, shared, direct
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, viewedAt])
  @@map("recent_views")
}

model Booking {
  id                String   @id @default(cuid())
  userId            String
  bookingReference  String   @unique
  itineraryId       String?
  packageId         String?
  status            String   @default("pending") // pending, confirmed, cancelled, completed, refunded
  bookingDate       DateTime @default(now())
  travelStartDate   DateTime
  travelEndDate     DateTime
  destination       String
  travelers         Int      @default(1)
  totalAmount       Float
  paidAmount        Float    @default(0)
  currency          String   @default("INR")
  paymentMethod     String?
  paymentStatus     String   @default("pending") // pending, paid, partially_paid, refunded
  provider          String
  contactInfo       Json     // Store contact information
  bookingData       Json?    // Store detailed booking information
  specialRequests   String   @default("")
  documents         Json?    // Store document URLs and metadata
  notifications     Json?    // Store notification history
  cancellationPolicy String?
  cancellationDeadline DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments          Payment[]

  @@index([userId, bookingDate])
  @@map("bookings")
}

model Payment {
  id                  String   @id @default(cuid())
  bookingId           String
  razorpayPaymentId   String?  @unique
  razorpayOrderId     String   @unique
  razorpaySignature   String?
  amount              Float
  currency            String   @default("INR")
  status              String   @default("created") // created, pending, paid, failed, cancelled, refunded
  paymentMethod       String?  // card, netbanking, wallet, upi
  description         String?
  notes               Json?    // Store additional payment notes
  failureReason       String?
  refundId            String?
  refundAmount        Float?
  refundStatus        String?  // pending, processed, failed
  metadata            Json?    // Store Razorpay response metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  booking             Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([razorpayOrderId])
  @@index([bookingId])
  @@map("payments")
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  type        String   // view, save, book, share, review, search
  description String
  metadata    Json?    // Store additional activity data
  location    String?
  device      String?
  timestamp   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@map("user_activities")
}

model Wishlist {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean  @default(false)
  shareUrl    String?  @unique
  items       Json?    // Store wishlist items
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wishlists")
}

model TravelMemory {
  id            String   @id @default(cuid())
  userId        String
  itineraryId   String?
  bookingId     String?
  title         String
  description   String
  destination   String
  date          DateTime
  photos        Json?    // Store photo URLs and metadata
  rating        Float    @default(0)
  highlights    String   @default("")
  recommendations String   @default("")
  wouldRecommend Boolean @default(true)
  companionType String?  // solo, couple, family, friends, group
  tags          String   @default("")
  isPublic      Boolean  @default(false)
  likes         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@map("travel_memories")
}

model Package {
  id            String   @id
  name          String
  description   String
  price         Float
  originalPrice Float?
  duration      String
  destination   String
  provider      String
  rating        Float    @default(0)
  reviews       Int      @default(0)
  currency      String   @default("INR")
  images        String   @default("")
  highlights    String   @default("")
  inclusions    String   @default("")
  exclusions    String   @default("")
  category      String   @default("general")
  tags          String   @default("")
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("packages")
}

model TicketBooking {
  id              String   @id @default(cuid())
  userId          String
  ticketType      String   // hotel, event, flight, transport, activity
  title           String
  description     String?
  venue           String?
  eventDate       DateTime?
  eventTime       String?
  checkInDate     DateTime?
  checkOutDate    DateTime?
  location        String
  category        String   @default("general")
  price           Float
  currency        String   @default("INR")
  quantity        Int      @default(1)
  totalAmount     Float
  status          String   @default("confirmed") // confirmed, cancelled, used, expired
  paymentStatus   String   @default("paid") // paid, pending, failed, refunded
  bookingReference String  @unique
  qrCode          String?
  qrCodeUrl       String?
  razorpayOrderId String?
  razorpayPaymentId String?
  guestInfo       Json?    // Store guest information
  bookingData     Json?    // Store additional booking details
  providerInfo    Json?    // Store provider/vendor details
  cancellationPolicy String?
  termsConditions String?
  specialInstructions String?
  emailSent       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([bookingReference])
  @@map("ticket_bookings")
}
